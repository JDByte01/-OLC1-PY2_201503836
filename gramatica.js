/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[2,5,11,14,21,23,25,27,28,29,32,33,34,36,37,38,39,40],$Vi=[1,46],$Vj=[1,38],$Vk=[1,37],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,52],$Vt=[1,51],$Vu=[10,12,41],$Vv=[2,41],$Vw=[1,77],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,84],$VJ=[1,86],$VK=[1,87],$VL=[1,80],$VM=[1,81],$VN=[1,85],$VO=[1,82],$VP=[1,83],$VQ=[1,88],$VR=[1,89],$VS=[10,12,17,47,49,50,52,53,54,55,56,57,58],$VT=[2,11,14,20,21,23,25,27,28,29,32,33,34,36,37,38,39,40,46,48],$VU=[1,141],$VV=[17,41],$VW=[10,12,17,47,49,50,55,56,57,58],$VX=[10,17,47,49,50],$VY=[10,17,47,49,50,57,58],$VZ=[1,186],$V_=[1,187],$V$=[1,220],$V01=[20,46,48],$V11=[2,5,11,14,20,21,23,25,27,28,29,32,33,34,36,37,38,39,40,44,46,48],$V21=[1,279];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"sentencias":4,"EOF":5,"sentencia":6,"tipo_dato":7,"lista_id":8,"asignacion":9,";":10,"ID":11,"=":12,"expresion":13,"PR_VOID":14,"(":15,"parametros":16,")":17,"{":18,"sentencias_m":19,"}":20,"PR_IF":21,"else_if":22,"PR_SWITCH":23,"lista_case":24,"PR_FOR":25,"paso":26,"PR_WHILE":27,"PR_DO":28,"PR_CONSOLE":29,".":30,"PR_WRITE":31,"PR_RETURN":32,"PR_BREAK":33,"PR_CONTINUE":34,"PR_MAIN":35,"PR_INT":36,"PR_DOUBLE":37,"PR_CHAR":38,"PR_BOOL":39,"PR_STRING":40,",":41,"parametro":42,"elif":43,"PR_ELSE":44,"case":45,"PR_CASE":46,":":47,"PR_DEFAULT":48,"+":49,"-":50,"sentencia_m":51,"&&":52,"||":53,"!":54,"<":55,">":56,"*":57,"/":58,"ENTERO":59,"FLOTANTE":60,"CARACTER":61,"CADENA":62,"HTML":63,"TRUE":64,"FALSE":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",11:"ID",12:"=",14:"PR_VOID",15:"(",17:")",18:"{",20:"}",21:"PR_IF",23:"PR_SWITCH",25:"PR_FOR",27:"PR_WHILE",28:"PR_DO",29:"PR_CONSOLE",30:".",31:"PR_WRITE",32:"PR_RETURN",33:"PR_BREAK",34:"PR_CONTINUE",35:"PR_MAIN",36:"PR_INT",37:"PR_DOUBLE",38:"PR_CHAR",39:"PR_BOOL",40:"PR_STRING",41:",",44:"PR_ELSE",46:"PR_CASE",47:":",48:"PR_DEFAULT",49:"+",50:"-",52:"&&",53:"||",54:"!",55:"<",56:">",57:"*",58:"/",59:"ENTERO",60:"FLOTANTE",61:"CARACTER",62:"CADENA",63:"HTML",64:"TRUE",65:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,3],[6,4],[6,8],[6,7],[6,7],[6,6],[6,8],[6,7],[6,7],[6,8],[6,7],[6,7],[6,6],[6,7],[6,14],[6,13],[6,13],[6,12],[6,7],[6,6],[6,9],[6,8],[6,7],[6,3],[6,2],[6,2],[6,2],[6,7],[6,6],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,1],[9,2],[16,3],[16,1],[42,2],[22,2],[22,1],[43,8],[43,7],[43,4],[43,3],[24,2],[24,1],[45,4],[45,3],[26,3],[26,3],[19,2],[19,1],[51,4],[51,3],[51,4],[51,8],[51,7],[51,7],[51,6],[51,8],[51,7],[51,7],[51,8],[51,7],[51,7],[51,6],[51,7],[51,14],[51,13],[51,13],[51,12],[51,7],[51,6],[51,9],[51,8],[51,7],[51,3],[51,2],[51,2],[51,2],[51,7],[51,6],[51,1],[13,3],[13,3],[13,2],[13,3],[13,4],[13,3],[13,4],[13,4],[13,4],[13,3],[13,3],[13,3],[13,3],[13,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 46: case 52: case 58:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 41: case 44: case 47: case 53: case 59:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 60: case 62:
 console.log($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 5: case 61:
 console.log($$[$0-2],$$[$0-1],$$[$0],); 
break;
case 7: case 11: case 14: case 26: case 63: case 67: case 70: case 82:
 console.log($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 8: case 9: case 13: case 15: case 16: case 18: case 23: case 27: case 32: case 64: case 65: case 69: case 71: case 72: case 74: case 79: case 83: case 88:
 console.log($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 10: case 17: case 24: case 33: case 66: case 73: case 80: case 89:
 console.log($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 12: case 68:
 console.log($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 19: case 75:
 console.log($$[$0-13],$$[$0-12],$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 20: case 76:
 console.log($$[$0-12],$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]); 
break;
case 21: case 77:
 console.log($$[$0-12],$$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 22: case 78:
 console.log($$[$0-11],$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 25: case 81:
 console.log($$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 28: case 84:
 console.log($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 29: case 30: case 31: case 85: case 86: case 87:
 console.log($$[$0-1],$$[$0]); 
break;
case 34: case 90:
 console.log('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 35: case 36: case 37: case 38: case 39:
 this.$ = $$[$0];
break;
case 40: case 43:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 42: case 45: case 93:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 48:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 49:
 this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 50: case 54: case 95: case 97: case 98: case 99:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 51: case 55: case 56: case 57: case 91: case 92: case 94: case 96: case 100: case 101: case 102: case 103: case 104:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112:
 this.$ = $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,11:$V1,14:$V2,21:$V3,23:$V4,25:$V5,27:$V6,28:$V7,29:$V8,32:$V9,33:$Va,34:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,11:$V1,14:$V2,21:$V3,23:$V4,25:$V5,27:$V6,28:$V7,29:$V8,32:$V9,33:$Va,34:$Vb,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg},o($Vh,[2,3]),{8:24,11:[1,25]},{12:[1,26]},{11:[1,27],35:[1,28]},{15:[1,29]},{15:[1,30]},{15:[1,31]},{15:[1,32]},{18:[1,33]},{30:[1,34]},{10:[1,36],11:$Vi,13:35,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,47]},{10:[1,48]},o($Vh,[2,34]),{11:[2,35]},{11:[2,36]},{11:[2,37]},{11:[2,38]},{11:[2,39]},{1:[2,1]},o($Vh,[2,2]),{9:49,10:[1,50],12:$Vs,41:$Vt},o($Vu,$Vv,{15:[1,53]}),{11:$Vi,13:54,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{15:[1,55]},{15:[1,56]},{11:$Vi,13:57,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:58,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{7:59,11:[1,60],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg},{11:$Vi,13:61,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{2:$Vw,7:65,11:$Vx,14:$Vy,19:62,20:[1,63],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{31:[1,78]},{10:[1,79],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($Vh,[2,29]),{11:$Vi,13:90,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:91,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),o($VS,[2,111]),o($VS,[2,112]),o($Vh,[2,30]),o($Vh,[2,31]),{10:[1,92]},o($Vh,[2,5]),{11:[1,93]},{11:$Vi,13:94,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{7:98,16:95,17:[1,96],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,42:97},{10:[1,99],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{7:98,16:100,17:[1,101],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,42:97},{17:[1,102]},{12:$VI,17:[1,103],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{12:$VI,17:[1,104],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:[1,105]},{12:[1,106]},{12:$VI,17:[1,107],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,108],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},{27:[1,110]},o($VT,[2,59]),{8:111,11:[1,112]},{12:[1,113]},{11:[1,114],35:[1,115]},{15:[1,116]},{15:[1,117]},{15:[1,118]},{15:[1,119]},{18:[1,120]},{30:[1,121]},{10:[1,123],11:$Vi,13:122,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,124]},{10:[1,125]},o($VT,[2,90]),{15:[1,126]},o($Vh,[2,28]),{11:$Vi,13:127,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:128,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,12:[1,130],13:129,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,12:[1,132],13:131,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{12:[1,133]},{12:[1,134]},{11:$Vi,13:135,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:136,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:137,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:138,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VS,[2,93]),{12:$VI,17:[1,139],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($Vh,[2,4]),o($Vu,[2,40]),{10:[2,42],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{17:[1,140],41:$VU},{18:[1,142]},o($VV,[2,44]),{11:[1,143]},o($Vh,[2,6]),{17:[1,144],41:$VU},{18:[1,145]},{18:[1,146]},{18:[1,147]},{18:[1,148]},{12:[1,149]},{11:$Vi,13:150,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{18:[1,151]},{27:[1,152]},o($VT,[2,58]),{15:[1,153]},{9:154,10:[1,155],12:$Vs,41:$Vt},o($Vu,$Vv,{15:[1,156]}),{11:$Vi,13:157,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{15:[1,158]},{15:[1,159]},{11:$Vi,13:160,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:161,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{7:162,11:[1,163],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg},{11:$Vi,13:164,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{2:$Vw,7:65,11:$Vx,14:$Vy,19:165,20:[1,166],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{31:[1,167]},{10:[1,168],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($VT,[2,85]),o($VT,[2,86]),o($VT,[2,87]),{11:$Vi,13:169,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VS,[2,91]),o($VS,[2,92]),o($VW,[2,94],{52:$VL,53:$VM,54:$VN}),{11:$Vi,13:170,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VW,[2,96],{52:$VL,53:$VM,54:$VN}),{11:$Vi,13:171,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:172,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{11:$Vi,13:173,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},o($VX,[2,100],{12:$VI,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR}),o($VX,[2,101],{12:$VI,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR}),o($VY,[2,102],{12:$VI,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP}),o($VY,[2,103],{12:$VI,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP}),o($VS,[2,104]),{18:[1,174]},{7:98,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,42:175},{2:$Vw,7:65,11:$Vx,14:$Vy,19:176,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},o($VV,[2,45]),{18:[1,177]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:178,20:[1,179],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:180,20:[1,181],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:182,20:[1,183],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{24:184,45:185,46:$VZ,48:$V_},{11:$Vi,13:188,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,189],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{2:$Vw,7:65,11:$Vx,14:$Vy,19:190,20:[1,191],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{15:[1,192]},{11:$Vi,13:193,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,194]},o($VT,[2,61]),{7:98,16:195,17:[1,196],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,42:97},{10:[1,197],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{7:98,16:198,17:[1,199],36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,42:97},{17:[1,200]},{12:$VI,17:[1,201],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{12:$VI,17:[1,202],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:[1,203]},{12:[1,204]},{12:$VI,17:[1,205],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,206],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},{27:[1,207]},{15:[1,208]},o($VT,[2,84]),{12:$VI,17:[1,209],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($VW,[2,95],{52:$VL,53:$VM,54:$VN}),o($VW,[2,97],{52:$VL,53:$VM,54:$VN}),o($VW,[2,98],{52:$VL,53:$VM,54:$VN}),o($VS,[2,99]),{2:$Vw,7:65,11:$Vx,14:$Vy,19:210,20:[1,211],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},o($VV,[2,43]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,212],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},{2:$Vw,7:65,11:$Vx,14:$Vy,19:213,20:[1,214],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,215],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,10]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,216],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,33]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,217],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,17],{22:218,43:219,44:$V$}),{20:[1,221],45:222,46:$VZ,48:$V_},o($V01,[2,53]),{11:$Vi,13:223,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{47:[1,224]},{10:[1,225],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:$Vi,13:226,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,227],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,24]),{11:$Vi,13:228,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{12:$VI,17:[1,229],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($VT,[2,60]),{17:[1,230],41:$VU},{18:[1,231]},o($VT,[2,62]),{17:[1,232],41:$VU},{18:[1,233]},{18:[1,234]},{18:[1,235]},{18:[1,236]},{12:[1,237]},{11:$Vi,13:238,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{18:[1,239]},{27:[1,240]},{15:[1,241]},{11:$Vi,13:242,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,243]},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,244],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,12]),o($Vh,[2,13]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,245],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,32]),o($Vh,[2,15],{43:219,22:246,44:$V$}),o($Vh,[2,16],{43:247,44:$V$}),o($V11,[2,47]),{18:[1,249],21:[1,248]},o($Vh,[2,18]),o($V01,[2,52]),{12:$VI,47:[1,250],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{2:$Vw,7:65,11:$Vx,14:$Vy,19:251,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{11:$Vi,13:252,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,253],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($Vh,[2,23]),{12:$VI,17:[1,254],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{10:[1,255]},{18:[1,256]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:257,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{18:[1,258]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:259,20:[1,260],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:261,20:[1,262],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:263,20:[1,264],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{24:265,45:185,46:$VZ,48:$V_},{11:$Vi,13:266,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,267],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{2:$Vw,7:65,11:$Vx,14:$Vy,19:268,20:[1,269],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{15:[1,270]},{11:$Vi,13:271,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{12:$VI,17:[1,272],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($Vh,[2,27]),o($Vh,[2,11]),o($Vh,[2,7]),o($Vh,[2,14],{43:247,44:$V$}),o($V11,[2,46]),{15:[1,273]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:274,20:[1,275],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:276,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},o($V01,[2,55],{7:65,51:109,2:$Vw,11:$Vx,14:$Vy,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg}),{10:[1,277],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:$V21,26:278},{10:[1,280]},o($Vh,[2,26]),{2:$Vw,7:65,11:$Vx,14:$Vy,19:281,20:[1,282],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,283],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},{2:$Vw,7:65,11:$Vx,14:$Vy,19:284,20:[1,285],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,286],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,66]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,287],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,89]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,288],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,73],{43:219,22:289,44:$V$}),{20:[1,290],45:222,46:$VZ,48:$V_},{10:[1,291],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:$Vi,13:292,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,293],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,80]),{11:$Vi,13:294,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{12:$VI,17:[1,295],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{10:[1,296]},{11:$Vi,13:297,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,298],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($V11,[2,51]),o($V01,[2,54],{7:65,51:109,2:$Vw,11:$Vx,14:$Vy,21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg}),{11:$V21,26:299},{17:[1,300]},{49:[1,301],50:[1,302]},o($Vh,[2,25]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,303],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,68]),o($VT,[2,69]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,304],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,64]),o($VT,[2,65]),o($VT,[2,88]),o($VT,[2,71],{43:219,22:305,44:$V$}),o($VT,[2,72],{43:247,44:$V$}),o($VT,[2,74]),{11:$Vi,13:306,15:$Vj,54:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr},{10:[1,307],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($VT,[2,79]),{12:$VI,17:[1,308],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{10:[1,309]},o($VT,[2,83]),{12:$VI,17:[1,310],49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},o($V11,[2,50]),{17:[1,311]},{18:[1,312]},{49:[1,313]},{50:[1,314]},o($VT,[2,67]),o($VT,[2,63]),o($VT,[2,70],{43:247,44:$V$}),{10:[1,315],12:$VI,49:$VJ,50:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR},{11:$V21,26:316},{10:[1,317]},o($VT,[2,82]),{18:[1,318]},{18:[1,319]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:320,20:[1,321],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{17:[2,56]},{17:[2,57]},{11:$V21,26:322},{17:[1,323]},o($VT,[2,81]),{2:$Vw,7:65,11:$Vx,14:$Vy,19:324,20:[1,325],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,19:326,20:[1,327],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,328],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,22]),{17:[1,329]},{18:[1,330]},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,331],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($V11,[2,49]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,332],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($Vh,[2,20]),o($Vh,[2,21]),{18:[1,333]},{2:$Vw,7:65,11:$Vx,14:$Vy,19:334,20:[1,335],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},o($V11,[2,48]),o($Vh,[2,19]),{2:$Vw,7:65,11:$Vx,14:$Vy,19:336,20:[1,337],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:64},{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,338],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,78]),{2:$Vw,7:65,11:$Vx,14:$Vy,20:[1,339],21:$Vz,23:$VA,25:$VB,27:$VC,28:$VD,29:$VE,32:$VF,33:$VG,34:$VH,36:$Vc,37:$Vd,38:$Ve,39:$Vf,40:$Vg,51:109},o($VT,[2,76]),o($VT,[2,77]),o($VT,[2,75])],
defaultActions: {17:[2,35],18:[2,36],19:[2,37],20:[2,38],21:[2,39],22:[2,1],313:[2,56],314:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//Codigo JavaScript
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacio en blanco
break;
case 1://Comentario bloque
break;
case 2://Comentario l√≠nea
break;
case 3: return 15; 
break;
case 4: return 17; 
break;
case 5: return 18; 
break;
case 6: return 20; 
break;
case 7: return 41; 
break;
case 8: return 10; 
break;
case 9: return 30; 
break;
case 10: return 12; 
break;
case 11: return 47; 
break;
case 12: return 49; 
break;
case 13: return 50; 
break;
case 14: return 57; 
break;
case 15: return 58; 
break;
case 16: return 52; 
break;
case 17: return 53; 
break;
case 18: return 54; 
break;
case 19: return 56; 
break;
case 20: return 55; 
break;
case 21: return '++'; 
break;
case 22: return '--'; 
break;
case 23:return 14;
break;
case 24:return 35;
break;
case 25:return 29;
break;
case 26:return 31;
break;
case 27:return 21;
break;
case 28:return 44;
break;
case 29:return 23;
break;
case 30:return 46;
break;
case 31:return 48;
break;
case 32:return 25;
break;
case 33:return 27;
break;
case 34:return 28;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 34;
break;
case 38:return 64;
break;
case 39:return 65;
break;
case 40:return 36;
break;
case 41:return 37;
break;
case 42:return 38;
break;
case 43:return 39;
break;
case 44:return 40;
break;
case 45:return 60;
break;
case 46:return 59;
break;
case 47:return 11;
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 51:return 5;
break;
case 52: console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:Void\b)/i,/^(?:Main\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:If\b)/i,/^(?:Else\b)/i,/^(?:Switch\b)/i,/^(?:Case\b)/i,/^(?:Default\b)/i,/^(?:For\b)/i,/^(?:While\b)/i,/^(?:Do\b)/i,/^(?:Return\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Char\b)/i,/^(?:Bool\b)/i,/^(?:String\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}