/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[2,5,12,13,20,22,23,25,27,28,29,32,33,34,36,37,38,39,40],$Vj=[1,49],$Vk=[1,41],$Vl=[1,40],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,54],$Vu=[9,11,41],$Vv=[2,43],$Vw=[1,61],$Vx=[1,79],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[9,11,16,45,47,48,51,52,53,54,55,56,57],$VO=[11,16],$VP=[11,16,51,52],$VQ=[2,12,19,20,22,23,25,27,28,29,32,33,34,36,37,38,39,40,44,46],$VR=[1,144],$VS=[16,41],$VT=[9,11,16,45,47,48,51,52,53,54,55],$VU=[1,211],$VV=[1,212],$VW=[19,44,46],$VX=[1,283];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"sentencias":4,"EOF":5,"sentencia":6,"tipo_dato":7,"lista_id":8,"=":9,"exp_num":10,";":11,"ID":12,"PR_VOID":13,"(":14,"parametros":15,")":16,"{":17,"sentencias_m":18,"}":19,"PR_IF":20,"exp_logica":21,"PR_ELSE":22,"PR_SWITCH":23,"lista_case":24,"PR_FOR":25,"paso":26,"PR_WHILE":27,"PR_DO":28,"PR_CONSOLE":29,".":30,"PR_WRITE":31,"PR_RETURN":32,"PR_BREAK":33,"PR_CONTINUE":34,"PR_MAIN":35,"PR_INT":36,"PR_DOUBLE":37,"PR_CHAR":38,"PR_BOOL":39,"PR_STRING":40,",":41,"parametro":42,"case":43,"PR_CASE":44,":":45,"PR_DEFAULT":46,"+":47,"-":48,"sentencia_m":49,"exp_relacional":50,"&&":51,"||":52,"!":53,"<":54,">":55,"*":56,"/":57,"ENTERO":58,"FLOTANTE":59,"CARACTER":60,"CADENA":61,"HTML":62,"TRUE":63,"FALSE":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"=",11:";",12:"ID",13:"PR_VOID",14:"(",16:")",17:"{",19:"}",20:"PR_IF",22:"PR_ELSE",23:"PR_SWITCH",25:"PR_FOR",27:"PR_WHILE",28:"PR_DO",29:"PR_CONSOLE",30:".",31:"PR_WRITE",32:"PR_RETURN",33:"PR_BREAK",34:"PR_CONTINUE",35:"PR_MAIN",36:"PR_INT",37:"PR_DOUBLE",38:"PR_CHAR",39:"PR_BOOL",40:"PR_STRING",41:",",44:"PR_CASE",45:":",46:"PR_DEFAULT",47:"+",48:"-",51:"&&",52:"||",53:"!",54:"<",55:">",56:"*",57:"/",58:"ENTERO",59:"FLOTANTE",60:"CARACTER",61:"CADENA",62:"HTML",63:"TRUE",64:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,3],[6,4],[6,8],[6,7],[6,7],[6,6],[6,8],[6,7],[6,7],[6,7],[6,6],[6,8],[6,7],[6,4],[6,3],[6,7],[6,14],[6,13],[6,13],[6,12],[6,7],[6,6],[6,9],[6,8],[6,7],[6,3],[6,2],[6,2],[6,2],[6,7],[6,6],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,1],[15,3],[15,1],[42,2],[24,2],[24,1],[43,4],[43,3],[26,3],[26,3],[18,2],[18,1],[49,5],[49,3],[49,4],[49,7],[49,6],[49,8],[49,7],[49,4],[49,3],[49,7],[49,14],[49,13],[49,13],[49,12],[49,7],[49,6],[49,9],[49,8],[49,7],[49,3],[49,2],[49,2],[49,2],[49,1],[21,3],[21,3],[21,2],[21,1],[50,3],[50,4],[50,3],[50,4],[50,4],[50,4],[50,1],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(" |> AST generado..."); /*console.log(" ** Errores: ", getErrores());*/ return $$[$0-1]; 
break;
case 2: case 47: case 53:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 54:
 this.$ = [$$[$0]]; 
break;
case 4: case 55:
 this.$ = API.nuevoDeclaracionA($$[$0-3], $$[$0-4], $$[$0-1]); 
break;
case 5: case 56:
 this.$ = API.nuevoDeclaracion($$[$0-1], $$[$0-2]); 
break;
case 6: case 57:
 this.$ = API.nuevoAsignacion($$[$0-3], $$[$0-1]); 
break;
case 7:
 this.$ = API.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 8:
 this.$ = API.nuevoMetodo($$[$0-5], $$[$0-3], undefined); 
break;
case 9:
 this.$ = API.nuevoMetodo($$[$0-5], undefined, $$[$0-1]); 
break;
case 10:
 this.$ = API.nuevoMetodo($$[$0-4], undefined, undefined); 
break;
case 11:
 this.$ = API.nuevoFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 12:
 this.$ = API.nuevoFuncion($$[$0-6], $$[$0-5], $$[$0-3], undefined); 
break;
case 13:
 this.$ = API.nuevoFuncion($$[$0-6], $$[$0-5], undefined, $$[$0-1]); 
break;
case 14: case 58:
 this.$ = API.nuevoIf($$[$0-4], $$[$0-1]); 
break;
case 15: case 59:
 this.$ = API.nuevoIf($$[$0-3], undefined); 
break;
case 16: case 60:
 this.$ = API.nuevoElseIf($$[$0-4], $$[$0-1]); 
break;
case 17: case 61:
 this.$ = API.nuevoElseIf($$[$0-3], undefined); 
break;
case 18: case 62:
 this.$ = API.nuevoElse($$[$0-1]); 
break;
case 19: case 63:
 this.$ = API.nuevoElse(undefined); 
break;
case 20: case 64:
 this.$ = API.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 21: case 65:
 this.$ = API.nuevoFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0-11]); 
break;
case 22: case 66:
 this.$ = API.nuevoFor($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], undefined, $$[$0-10]); 
break;
case 23: case 67:
 this.$ = API.nuevoFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-2], $$[$0-1], undefined); 
break;
case 24: case 68:
 this.$ = API.nuevoFor($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], undefined, undefined); 
break;
case 25: case 69:
 this.$ = API.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 26: case 70:
 this.$ = API.nuevoWhile($$[$0-3], undefined); 
break;
case 27: case 71:
 this.$ = API.nuevoDoWhile($$[$0-2], $$[$0-6]); 
break;
case 28: case 72:
 this.$ = API.nuevoDoWhile($$[$0-2], undefined); 
break;
case 29: case 73:
 this.$ = API.nuevoImprimir($$[$0-2]); 
break;
case 30: case 74:
 this.$ = API.nuevoReturnE($$[$0-1]); 
break;
case 31: case 75:
 this.$ = API.nuevoReturn(); 
break;
case 32: case 76:
 this.$ = API.nuevoBreak(); 
break;
case 33: case 77:
 this.$ = API.nuevoContinue(); 
break;
case 34:
 this.$ = API.nuevoMain($$[$0-1]); 
break;
case 35:
 this.$ = API.nuevoMain(undefined); 
break;
case 36: case 78:

				//console.log('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
				error({tipo:'Sintactico', contenido: yytext , fila: this._$.first_line, columna:  this._$.first_column })
			
break;
case 37: case 38: case 39: case 40: case 41:
 this.$ = $$[$0];
break;
case 42: case 44:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43:
 this.$ = API.nuevoListaIds($$[$0]); 
break;
case 45:
 this.$ = API.nuevoListaParametro($$[$0]); 
break;
case 46:
 this.$ = API.nuevoParametro($$[$0-1], $$[$0]); 
break;
case 48:
 this.$ = API.nuevoListaCase($$[$0]); 
break;
case 49:
 this.$ = API.nuevoCase($$[$0-2], $$[$0]); 
break;
case 50:
 this.$ = API.nuevoDefault($$[$0]); 
break;
case 51:
 this.$ = API.nuevoIncremento($$[$0-2]); 
break;
case 52:
 this.$ = API.nuevoDecremento($$[$0-2]); 
break;
case 79:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 80:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 81:
 this.$ = API.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 82: case 89:
 this.$ = $$[$0]; 
break;
case 83:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 84:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 85:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 86:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 87:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 88:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 90:
 this.$ = API.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 91:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 92:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 93:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 94:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 95:
 this.$ = $$[$0-1]; 
break;
case 96:
 this.$ = API.nuevoValor(Number($$[$0]), TIPO_VALOR.INT); 
break;
case 97:
 this.$ = API.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE); 
break;
case 98:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.CHAR); 
break;
case 99:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.STRING); 
break;
case 100:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.HTML); 
break;
case 101: case 102:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.BOOL); 
break;
case 103:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.ID); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,12:$V1,13:$V2,20:$V3,22:$V4,23:$V5,25:$V6,27:$V7,28:$V8,29:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,12:$V1,13:$V2,20:$V3,22:$V4,23:$V5,25:$V6,27:$V7,28:$V8,29:$V9,32:$Va,33:$Vb,34:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh},o($Vi,[2,3]),{8:25,12:[1,26]},{9:[1,27]},{12:[1,28],35:[1,29]},{14:[1,30]},{17:[1,32],20:[1,31]},{14:[1,33]},{14:[1,34]},{14:[1,35]},{17:[1,36]},{30:[1,37]},{10:38,11:[1,39],12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,50]},{11:[1,51]},o($Vi,[2,36]),{12:[2,37]},{12:[2,38]},{12:[2,39]},{12:[2,40]},{12:[2,41]},{1:[2,1]},o($Vi,[2,2]),{9:[1,52],11:[1,53],41:$Vt},o($Vu,$Vv,{14:[1,55]}),{10:56,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,57]},{14:[1,58]},{10:62,12:$Vj,14:$Vk,21:59,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,63]},{2:$Vx,7:67,12:$Vy,18:64,19:[1,65],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{10:80,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{7:81,12:[1,82],36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{10:62,12:$Vj,14:$Vk,21:83,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,18:84,19:[1,85],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{31:[1,86]},{11:[1,87],47:$VJ,48:$VK,56:$VL,57:$VM},o($Vi,[2,31]),{10:92,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:93,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VN,[2,96]),o($VN,[2,97]),o($VN,[2,98]),o($VN,[2,99]),o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($Vi,[2,32]),o($Vi,[2,33]),{10:94,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($Vi,[2,5]),{12:[1,95]},{7:99,15:96,16:[1,97],36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,42:98},{11:[1,100],47:$VJ,48:$VK,56:$VL,57:$VM},{7:99,15:101,16:[1,102],36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,42:98},{16:[1,103]},{16:[1,104]},o($VO,[2,82],{51:[1,105],52:[1,106]}),{10:62,12:$Vj,14:$Vk,48:$Vl,50:107,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VP,[2,89],{9:[1,110],47:$VJ,48:$VK,53:[1,111],54:[1,108],55:[1,109],56:$VL,57:$VM}),{10:62,12:$Vj,14:$Vk,21:112,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,19:[1,113],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,19]),o($VQ,[2,54]),{8:115,12:[1,116]},{9:[1,117]},{14:[1,118]},{17:[1,120],20:[1,119]},{14:[1,121]},{14:[1,122]},{14:[1,123]},{17:[1,124]},{30:[1,125]},{10:126,11:[1,127],12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,128]},{11:[1,129]},o($VQ,[2,78]),{16:[1,130],47:$VJ,48:$VK,56:$VL,57:$VM},{12:[1,131]},{9:[1,132]},{16:[1,133]},{2:$Vx,7:67,12:$Vy,19:[1,134],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},{27:[1,135]},{14:[1,136]},o($Vi,[2,30]),{10:137,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:138,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:139,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:140,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VN,[2,90]),{16:[1,141],47:$VJ,48:$VK,56:$VL,57:$VM},{11:[1,142],47:$VJ,48:$VK,56:$VL,57:$VM},o($Vu,[2,42]),{16:[1,143],41:$VR},{17:[1,145]},o($VS,[2,45]),{12:[1,146]},o($Vi,[2,6]),{16:[1,147],41:$VR},{17:[1,148]},{17:[1,149]},{17:[1,150]},{10:62,12:$Vj,14:$Vk,48:$Vl,50:151,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:62,12:$Vj,14:$Vk,48:$Vl,50:152,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VO,[2,81]),{9:[1,154],10:153,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{9:[1,156],10:155,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{9:[1,157]},{9:[1,158]},{16:[1,159]},o($Vi,[2,18]),o($VQ,[2,53]),{9:[1,160],11:[1,161],41:$Vt},o($Vu,$Vv),{10:162,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:62,12:$Vj,14:$Vk,21:163,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,164]},{2:$Vx,7:67,12:$Vy,18:165,19:[1,166],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{10:167,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{7:168,12:[1,169],36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{10:62,12:$Vj,14:$Vk,21:170,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,18:171,19:[1,172],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{31:[1,173]},{11:[1,174],47:$VJ,48:$VK,56:$VL,57:$VM},o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,77]),{17:[1,175]},{9:[1,176]},{10:177,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,178]},{27:[1,179]},{14:[1,180]},{10:181,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VT,[2,91],{56:$VL,57:$VM}),o($VT,[2,92],{56:$VL,57:$VM}),o($VN,[2,93]),o($VN,[2,94]),o($VN,[2,95]),o($Vi,[2,4]),{17:[1,182]},{7:99,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,42:183},{2:$Vx,7:67,12:$Vy,18:184,20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},o($VS,[2,46]),{17:[1,185]},{2:$Vx,7:67,12:$Vy,18:186,19:[1,187],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,18:188,19:[1,189],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,18:190,19:[1,191],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},o($VO,[2,79]),o($VO,[2,80]),o($VP,[2,83],{47:$VJ,48:$VK,56:$VL,57:$VM}),{10:192,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VP,[2,85],{47:$VJ,48:$VK,56:$VL,57:$VM}),{10:193,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:194,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:195,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,196]},{10:197,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VQ,[2,56]),{11:[1,198],47:$VJ,48:$VK,56:$VL,57:$VM},{16:[1,199]},{10:62,12:$Vj,14:$Vk,21:200,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,19:[1,201],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,63]),{16:[1,202],47:$VJ,48:$VK,56:$VL,57:$VM},{12:[1,203]},{9:[1,204]},{16:[1,205]},{2:$Vx,7:67,12:$Vy,19:[1,206],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},{27:[1,207]},{14:[1,208]},o($VQ,[2,74]),{24:209,43:210,44:$VU,46:$VV},{10:213,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,214],47:$VJ,48:$VK,56:$VL,57:$VM},{2:$Vx,7:67,12:$Vy,18:215,19:[1,216],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{14:[1,217]},{10:62,12:$Vj,14:$Vk,21:218,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,219],47:$VJ,48:$VK,56:$VL,57:$VM},{2:$Vx,7:67,12:$Vy,18:220,19:[1,221],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},o($VS,[2,44]),{2:$Vx,7:67,12:$Vy,19:[1,222],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},{2:$Vx,7:67,12:$Vy,18:223,19:[1,224],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,19:[1,225],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,10]),{2:$Vx,7:67,12:$Vy,19:[1,226],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,35]),{2:$Vx,7:67,12:$Vy,19:[1,227],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,15]),o($VP,[2,84],{47:$VJ,48:$VK,56:$VL,57:$VM}),o($VP,[2,86],{47:$VJ,48:$VK,56:$VL,57:$VM}),o($VP,[2,87],{47:$VJ,48:$VK,56:$VL,57:$VM}),o($VP,[2,88],{47:$VJ,48:$VK,56:$VL,57:$VM}),{2:$Vx,7:67,12:$Vy,18:228,19:[1,229],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{11:[1,230],47:$VJ,48:$VK,56:$VL,57:$VM},o($VQ,[2,57]),{17:[1,231]},{16:[1,232]},o($VQ,[2,62]),{17:[1,233]},{9:[1,234]},{10:235,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,236]},{27:[1,237]},{14:[1,238]},{10:239,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{19:[1,240],43:241,44:$VU,46:$VV},o($VW,[2,48]),{10:242,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{45:[1,243]},{11:[1,244],47:$VJ,48:$VK,56:$VL,57:$VM},{10:62,12:$Vj,14:$Vk,21:245,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,19:[1,246],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,26]),{10:62,12:$Vj,14:$Vk,21:247,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,248]},{11:[1,249]},{2:$Vx,7:67,12:$Vy,19:[1,250],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,12]),o($Vi,[2,13]),{2:$Vx,7:67,12:$Vy,19:[1,251],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,34]),o($Vi,[2,14]),{2:$Vx,7:67,12:$Vy,19:[1,252],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,17]),o($VQ,[2,55]),{2:$Vx,7:67,12:$Vy,18:253,19:[1,254],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{17:[1,255]},{24:256,43:210,44:$VU,46:$VV},{10:257,12:$Vj,14:$Vk,48:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,258],47:$VJ,48:$VK,56:$VL,57:$VM},{2:$Vx,7:67,12:$Vy,18:259,19:[1,260],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{14:[1,261]},{10:62,12:$Vj,14:$Vk,21:262,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,263],47:$VJ,48:$VK,56:$VL,57:$VM},o($Vi,[2,20]),o($VW,[2,47]),{45:[1,264],47:$VJ,48:$VK,56:$VL,57:$VM},{2:$Vx,7:67,12:$Vy,18:265,20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{10:62,12:$Vj,14:$Vk,21:266,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,267]},o($Vi,[2,25]),{16:[1,268]},{11:[1,269]},o($Vi,[2,29]),o($Vi,[2,11]),o($Vi,[2,7]),o($Vi,[2,16]),{2:$Vx,7:67,12:$Vy,19:[1,270],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,59]),{2:$Vx,7:67,12:$Vy,18:271,19:[1,272],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{19:[1,273],43:241,44:$VU,46:$VV},{11:[1,274],47:$VJ,48:$VK,56:$VL,57:$VM},{10:62,12:$Vj,14:$Vk,21:275,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vx,7:67,12:$Vy,19:[1,276],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,70]),{10:62,12:$Vj,14:$Vk,21:277,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,278]},{11:[1,279]},{2:$Vx,7:67,12:$Vy,18:280,20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},o($VW,[2,50],{7:67,49:114,2:$Vx,12:$Vy,20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh}),{11:[1,281]},{12:$VX,26:282},{11:[1,284]},o($Vi,[2,28]),o($VQ,[2,58]),{2:$Vx,7:67,12:$Vy,19:[1,285],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,61]),o($VQ,[2,64]),{10:62,12:$Vj,14:$Vk,21:286,48:$Vl,50:60,53:$Vw,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,287]},o($VQ,[2,69]),{16:[1,288]},{11:[1,289]},o($VQ,[2,73]),o($VW,[2,49],{7:67,49:114,2:$Vx,12:$Vy,20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh}),{12:$VX,26:290},{16:[1,291]},{47:[1,292],48:[1,293]},o($Vi,[2,27]),o($VQ,[2,60]),{11:[1,294]},{12:$VX,26:295},{11:[1,296]},o($VQ,[2,72]),{16:[1,297]},{17:[1,298]},{47:[1,299]},{48:[1,300]},{12:$VX,26:301},{16:[1,302]},o($VQ,[2,71]),{17:[1,303]},{2:$Vx,7:67,12:$Vy,18:304,19:[1,305],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{16:[2,51]},{16:[2,52]},{16:[1,306]},{17:[1,307]},{2:$Vx,7:67,12:$Vy,18:308,19:[1,309],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,19:[1,310],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,24]),{17:[1,311]},{2:$Vx,7:67,12:$Vy,18:312,19:[1,313],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,19:[1,314],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($Vi,[2,22]),o($Vi,[2,23]),{2:$Vx,7:67,12:$Vy,18:315,19:[1,316],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:66},{2:$Vx,7:67,12:$Vy,19:[1,317],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,68]),o($Vi,[2,21]),{2:$Vx,7:67,12:$Vy,19:[1,318],20:$Vz,22:$VA,23:$VB,25:$VC,27:$VD,28:$VE,29:$VF,32:$VG,33:$VH,34:$VI,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,49:114},o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,65])],
defaultActions: {18:[2,37],19:[2,38],20:[2,39],21:[2,40],22:[2,41],23:[2,1],299:[2,51],300:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//Codigo JavaScript
	const TIPO_OPERACION = require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR = require('./instrucciones').TIPO_VALOR;
	const API = require('./instrucciones').API;

	//Lista de errores
	var errores = [];

	function error(err){
		errores.push(err);
	}

	reporte: function getErrores () {
		var temp = errores;
		errores = [];
		return temp;
	}

	exports.reporte = function () { return errores; };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacio en blanco
break;
case 1://Comentario bloque
break;
case 2://Comentario l√≠nea
break;
case 3: return 14; 
break;
case 4: return 16; 
break;
case 5: return 17; 
break;
case 6: return 19; 
break;
case 7: return 41; 
break;
case 8: return 11; 
break;
case 9: return 30; 
break;
case 10: return 9; 
break;
case 11: return 45; 
break;
case 12: return 47; 
break;
case 13: return 48; 
break;
case 14: return 56; 
break;
case 15: return 57; 
break;
case 16: return 51; 
break;
case 17: return 52; 
break;
case 18: return 53; 
break;
case 19: return 55; 
break;
case 20: return 54; 
break;
case 21: return '++'; 
break;
case 22: return '--'; 
break;
case 23:return 13;
break;
case 24:return 35;
break;
case 25:return 29;
break;
case 26:return 31;
break;
case 27:return 20;
break;
case 28:return 22;
break;
case 29:return 23;
break;
case 30:return 44;
break;
case 31:return 46;
break;
case 32:return 25;
break;
case 33:return 27;
break;
case 34:return 28;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 34;
break;
case 38:return 63;
break;
case 39:return 64;
break;
case 40:return 36;
break;
case 41:return 37;
break;
case 42:return 38;
break;
case 43:return 39;
break;
case 44:return 40;
break;
case 45:return 59;
break;
case 46:return 58;
break;
case 47:return 12;
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 51:return 5;
break;
case 52:
		//console.log('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
		error({tipo:'L√©xico', contenido: yy_.yytext , fila: yy_.yylloc.first_line, columna:  yy_.yylloc.first_column });
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:Void\b)/i,/^(?:Main\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:If\b)/i,/^(?:Else\b)/i,/^(?:Switch\b)/i,/^(?:Case\b)/i,/^(?:Default\b)/i,/^(?:For\b)/i,/^(?:While\b)/i,/^(?:Do\b)/i,/^(?:Return\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Char\b)/i,/^(?:Bool\b)/i,/^(?:String\b)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}