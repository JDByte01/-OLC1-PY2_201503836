/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[2,5,12,13,20,22,23,25,27,28,29,33,34,35,36,37],$Vg=[1,37],$Vh=[9,11,38],$Vi=[2,39],$Vj=[1,49],$Vk=[1,41],$Vl=[1,40],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,54],$Vu=[1,72],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,71],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[9,11,16,42,44,45,51,52,53,54,55,56,57],$VL=[11,16],$VM=[11,16,51,52],$VN=[2,12,19,20,22,23,25,27,28,29,33,34,35,36,37,41,43,47,48,49],$VO=[1,131],$VP=[16,38],$VQ=[9,11,16,42,44,45,51,52,53,54,55],$VR=[1,203],$VS=[1,204],$VT=[19,41,43],$VU=[1,275];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"sentencias":4,"EOF":5,"sentencia":6,"tipo_dato":7,"lista_id":8,"=":9,"exp_num":10,";":11,"ID":12,"PR_VOID":13,"(":14,"parametros":15,")":16,"{":17,"sentencias_m":18,"}":19,"PR_IF":20,"exp_logica":21,"PR_ELSE":22,"PR_SWITCH":23,"lista_case":24,"PR_FOR":25,"paso":26,"PR_WHILE":27,"PR_DO":28,"PR_CONSOLE":29,".":30,"PR_WRITE":31,"PR_MAIN":32,"PR_INT":33,"PR_DOUBLE":34,"PR_CHAR":35,"PR_BOOL":36,"PR_STRING":37,",":38,"parametro":39,"case":40,"PR_CASE":41,":":42,"PR_DEFAULT":43,"+":44,"-":45,"sentencia_m":46,"PR_RETURN":47,"PR_BREAK":48,"PR_CONTINUE":49,"exp_relacional":50,"&&":51,"||":52,"!":53,"<":54,">":55,"*":56,"/":57,"ENTERO":58,"FLOTANTE":59,"CARACTER":60,"CADENA":61,"HTML":62,"TRUE":63,"FALSE":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"=",11:";",12:"ID",13:"PR_VOID",14:"(",16:")",17:"{",19:"}",20:"PR_IF",22:"PR_ELSE",23:"PR_SWITCH",25:"PR_FOR",27:"PR_WHILE",28:"PR_DO",29:"PR_CONSOLE",30:".",31:"PR_WRITE",32:"PR_MAIN",33:"PR_INT",34:"PR_DOUBLE",35:"PR_CHAR",36:"PR_BOOL",37:"PR_STRING",38:",",41:"PR_CASE",42:":",43:"PR_DEFAULT",44:"+",45:"-",47:"PR_RETURN",48:"PR_BREAK",49:"PR_CONTINUE",51:"&&",52:"||",53:"!",54:"<",55:">",56:"*",57:"/",58:"ENTERO",59:"FLOTANTE",60:"CARACTER",61:"CADENA",62:"HTML",63:"TRUE",64:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,3],[6,4],[6,8],[6,7],[6,7],[6,6],[6,8],[6,7],[6,7],[6,7],[6,6],[6,8],[6,7],[6,4],[6,3],[6,7],[6,14],[6,13],[6,13],[6,12],[6,7],[6,6],[6,9],[6,8],[6,7],[6,7],[6,6],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,1],[15,3],[15,1],[39,2],[24,2],[24,1],[40,4],[40,3],[26,3],[26,3],[18,2],[18,1],[46,5],[46,3],[46,4],[46,7],[46,6],[46,8],[46,7],[46,4],[46,3],[46,7],[46,14],[46,13],[46,13],[46,12],[46,7],[46,6],[46,9],[46,8],[46,7],[46,3],[46,2],[46,2],[46,2],[46,1],[21,3],[21,3],[21,2],[21,1],[50,3],[50,4],[50,3],[50,4],[50,4],[50,4],[50,1],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(" |> AST generado..."); return $$[$0-1]; 
break;
case 2: case 43: case 49:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 50:
 this.$ = [$$[$0]]; 
break;
case 4: case 51:
 this.$ = API.nuevoDeclaracionA($$[$0-3], $$[$0-4], $$[$0-1]); 
break;
case 5: case 52:
 this.$ = API.nuevoDeclaracion($$[$0-1], $$[$0-2]); 
break;
case 6: case 53:
 this.$ = API.nuevoAsignacion($$[$0-3], $$[$0-1]); 
break;
case 7:
 this.$ = API.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 8:
 this.$ = API.nuevoMetodo($$[$0-5], $$[$0-3], undefined); 
break;
case 9:
 this.$ = API.nuevoMetodo($$[$0-5], undefined, $$[$0-1]); 
break;
case 10:
 this.$ = API.nuevoMetodo($$[$0-4], undefined, undefined); 
break;
case 11:
 this.$ = API.nuevoFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 12:
 this.$ = API.nuevoFuncion($$[$0-6], $$[$0-5], $$[$0-3], undefined); 
break;
case 13:
 this.$ = API.nuevoFuncion($$[$0-6], $$[$0-5], undefined, $$[$0-1]); 
break;
case 14: case 54:
 this.$ = API.nuevoIf($$[$0-4], $$[$0-1]); 
break;
case 15: case 55:
 this.$ = API.nuevoIf($$[$0-3], undefined); 
break;
case 16: case 56:
 this.$ = API.nuevoElseIf($$[$0-4], $$[$0-1]); 
break;
case 17: case 57:
 this.$ = API.nuevoElseIf($$[$0-3], undefined); 
break;
case 18: case 58:
 this.$ = API.nuevoElse($$[$0-1]); 
break;
case 19: case 59:
 this.$ = API.nuevoElse(undefined); 
break;
case 20: case 60:
 this.$ = API.nuevoSwitch($$[$0-4], $$[$0-1]); 
break;
case 21:
 this.$ = API.nuevoFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0-11]); variable($$[$0-11], $$[$0-10], this._$.first_line, this._$.first_column); 
break;
case 22: case 62:
 this.$ = API.nuevoFor($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], undefined, $$[$0-10]); variable($$[$0-10], $$[$0-9], this._$.first_line, this._$.first_column);
break;
case 23: case 63:
 this.$ = API.nuevoFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-2], $$[$0-1], undefined); 
break;
case 24: case 64:
 this.$ = API.nuevoFor($$[$0-9], $$[$0-7], $$[$0-5], $$[$0-1], undefined, undefined); 
break;
case 25: case 65:
 this.$ = API.nuevoWhile($$[$0-4], $$[$0-1]); 
break;
case 26: case 66:
 this.$ = API.nuevoWhile($$[$0-3], undefined); 
break;
case 27: case 67:
 this.$ = API.nuevoDoWhile($$[$0-2], $$[$0-6]); 
break;
case 28: case 68:
 this.$ = API.nuevoDoWhile($$[$0-2], undefined); 
break;
case 29: case 69:
 this.$ = API.nuevoImprimir($$[$0-2]); 
break;
case 30:
 this.$ = API.nuevoMain($$[$0-1]); 
break;
case 31:
 this.$ = API.nuevoMain(undefined); 
break;
case 32: case 74:

				//console.log('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
				error({tipo:'Sintactico', contenido: 'Se esperava [ ; | } | Terminal ] , se encontró: << ' + yytext + ' >>' , fila: this._$.first_line, columna:  this._$.first_column })
			
break;
case 33: case 34: case 35: case 36: case 37:
 this.$ = $$[$0];
break;
case 38: case 40:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 39:
 this.$ = API.nuevoListaIds($$[$0]); 
break;
case 41:
 this.$ = API.nuevoListaParametro($$[$0]); 
break;
case 42:
 this.$ = API.nuevoParametro($$[$0-1], $$[$0]); /*variable($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);*/ 
break;
case 44:
 this.$ = API.nuevoListaCase($$[$0]); 
break;
case 45:
 this.$ = API.nuevoCase($$[$0-2], $$[$0]); 
break;
case 46:
 this.$ = API.nuevoDefault($$[$0]); 
break;
case 47:
 this.$ = API.nuevoIncremento($$[$0-2]); 
break;
case 48:
 this.$ = API.nuevoDecremento($$[$0-2]); 
break;
case 61:
 this.$ = API.nuevoFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0-11]); variable($$[$0-11], $$[$0-10], this._$.first_line, this._$.first_column);
break;
case 70:
 this.$ = API.nuevoReturnE($$[$0-1]); 
break;
case 71:
 this.$ = API.nuevoReturn(); 
break;
case 72:
 this.$ = API.nuevoBreak(); 
break;
case 73:
 this.$ = API.nuevoContinue(); 
break;
case 75:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 76:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 77:
 this.$ = API.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 78: case 85:
 this.$ = $$[$0]; 
break;
case 79:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 80:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 81:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 82:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 83:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 84:
 this.$ = API.nuevoOperacionBinaria($$[$0-3], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 86:
 this.$ = API.nuevoOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 87:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 88:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 89:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 90:
 this.$ = API.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 91:
 this.$ = $$[$0-1]; 
break;
case 92:
 this.$ = API.nuevoValor(Number($$[$0]), TIPO_VALOR.INT); 
break;
case 93:
 this.$ = API.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE); 
break;
case 94:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.CHAR); 
break;
case 95:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.STRING); 
break;
case 96:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.HTML); docHtml($$[$0]); 
break;
case 97: case 98:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.BOOL); 
break;
case 99:
 this.$ = API.nuevoValor($$[$0], TIPO_VALOR.ID); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,12:$V1,13:$V2,20:$V3,22:$V4,23:$V5,25:$V6,27:$V7,28:$V8,29:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve},{1:[3]},{2:$V0,5:[1,20],6:21,7:4,12:$V1,13:$V2,20:$V3,22:$V4,23:$V5,25:$V6,27:$V7,28:$V8,29:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve},o($Vf,[2,3]),{8:22,12:[1,23]},{9:[1,24]},{12:[1,25],32:[1,26]},{14:[1,27]},{17:[1,29],20:[1,28]},{14:[1,30]},{14:[1,31]},{14:[1,32]},{17:[1,33]},{30:[1,34]},o($Vf,[2,32]),{12:[2,33]},{12:[2,34]},{12:[2,35]},{12:[2,36]},{12:[2,37]},{1:[2,1]},o($Vf,[2,2]),{9:[1,35],11:[1,36],38:$Vg},o($Vh,$Vi,{14:[1,38]}),{10:39,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,50]},{14:[1,51]},{10:55,12:$Vj,14:$Vk,21:52,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,56]},{2:$Vu,7:60,12:$Vv,18:57,19:[1,58],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{10:73,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{7:74,12:[1,75],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve},{10:55,12:$Vj,14:$Vk,21:76,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,18:77,19:[1,78],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{31:[1,79]},{10:80,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($Vf,[2,5]),{12:[1,81]},{7:85,15:82,16:[1,83],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,39:84},{11:[1,86],44:$VG,45:$VH,56:$VI,57:$VJ},{10:91,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:92,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),o($VK,[2,96]),o($VK,[2,97]),o($VK,[2,98]),o($VK,[2,99]),{7:85,15:93,16:[1,94],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,39:84},{16:[1,95]},{16:[1,96]},o($VL,[2,78],{51:[1,97],52:[1,98]}),{10:55,12:$Vj,14:$Vk,45:$Vl,50:99,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VM,[2,85],{9:[1,102],44:$VG,45:$VH,53:[1,103],54:[1,100],55:[1,101],56:$VI,57:$VJ}),{10:55,12:$Vj,14:$Vk,21:104,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,19:[1,105],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,19]),o($VN,[2,50]),{8:107,12:[1,108]},{9:[1,109]},{14:[1,110]},{17:[1,112],20:[1,111]},{14:[1,113]},{14:[1,114]},{14:[1,115]},{17:[1,116]},{30:[1,117]},{10:118,11:[1,119],12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,120]},{11:[1,121]},o($VN,[2,74]),{16:[1,122],44:$VG,45:$VH,56:$VI,57:$VJ},{12:[1,123]},{9:[1,124]},{16:[1,125]},{2:$Vu,7:60,12:$Vv,19:[1,126],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},{27:[1,127]},{14:[1,128]},{11:[1,129],44:$VG,45:$VH,56:$VI,57:$VJ},o($Vh,[2,38]),{16:[1,130],38:$VO},{17:[1,132]},o($VP,[2,41]),{12:[1,133]},o($Vf,[2,6]),{10:134,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:135,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:136,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:137,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VK,[2,86]),{16:[1,138],44:$VG,45:$VH,56:$VI,57:$VJ},{16:[1,139],38:$VO},{17:[1,140]},{17:[1,141]},{17:[1,142]},{10:55,12:$Vj,14:$Vk,45:$Vl,50:143,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:55,12:$Vj,14:$Vk,45:$Vl,50:144,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VL,[2,77]),{9:[1,146],10:145,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{9:[1,148],10:147,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{9:[1,149]},{9:[1,150]},{16:[1,151]},o($Vf,[2,18]),o($VN,[2,49]),{9:[1,152],11:[1,153],38:$Vg},o($Vh,$Vi),{10:154,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:55,12:$Vj,14:$Vk,21:155,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{14:[1,156]},{2:$Vu,7:60,12:$Vv,18:157,19:[1,158],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{10:159,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{7:160,12:[1,161],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve},{10:55,12:$Vj,14:$Vk,21:162,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,18:163,19:[1,164],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{31:[1,165]},{11:[1,166],44:$VG,45:$VH,56:$VI,57:$VJ},o($VN,[2,71]),o($VN,[2,72]),o($VN,[2,73]),{17:[1,167]},{9:[1,168]},{10:169,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,170]},{27:[1,171]},{14:[1,172]},{10:173,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($Vf,[2,4]),{17:[1,174]},{7:85,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,39:175},{2:$Vu,7:60,12:$Vv,18:176,20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},o($VP,[2,42]),o($VQ,[2,87],{56:$VI,57:$VJ}),o($VQ,[2,88],{56:$VI,57:$VJ}),o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),{17:[1,177]},{2:$Vu,7:60,12:$Vv,18:178,19:[1,179],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,18:180,19:[1,181],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,18:182,19:[1,183],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},o($VL,[2,75]),o($VL,[2,76]),o($VM,[2,79],{44:$VG,45:$VH,56:$VI,57:$VJ}),{10:184,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VM,[2,81],{44:$VG,45:$VH,56:$VI,57:$VJ}),{10:185,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:186,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{10:187,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,188]},{10:189,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},o($VN,[2,52]),{11:[1,190],44:$VG,45:$VH,56:$VI,57:$VJ},{16:[1,191]},{10:55,12:$Vj,14:$Vk,21:192,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,19:[1,193],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,59]),{16:[1,194],44:$VG,45:$VH,56:$VI,57:$VJ},{12:[1,195]},{9:[1,196]},{16:[1,197]},{2:$Vu,7:60,12:$Vv,19:[1,198],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},{27:[1,199]},{14:[1,200]},o($VN,[2,70]),{24:201,40:202,41:$VR,43:$VS},{10:205,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,206],44:$VG,45:$VH,56:$VI,57:$VJ},{2:$Vu,7:60,12:$Vv,18:207,19:[1,208],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{14:[1,209]},{10:55,12:$Vj,14:$Vk,21:210,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,211],44:$VG,45:$VH,56:$VI,57:$VJ},{2:$Vu,7:60,12:$Vv,18:212,19:[1,213],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},o($VP,[2,40]),{2:$Vu,7:60,12:$Vv,19:[1,214],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,18:215,19:[1,216],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,19:[1,217],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,10]),{2:$Vu,7:60,12:$Vv,19:[1,218],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,31]),{2:$Vu,7:60,12:$Vv,19:[1,219],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,15]),o($VM,[2,80],{44:$VG,45:$VH,56:$VI,57:$VJ}),o($VM,[2,82],{44:$VG,45:$VH,56:$VI,57:$VJ}),o($VM,[2,83],{44:$VG,45:$VH,56:$VI,57:$VJ}),o($VM,[2,84],{44:$VG,45:$VH,56:$VI,57:$VJ}),{2:$Vu,7:60,12:$Vv,18:220,19:[1,221],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{11:[1,222],44:$VG,45:$VH,56:$VI,57:$VJ},o($VN,[2,53]),{17:[1,223]},{16:[1,224]},o($VN,[2,58]),{17:[1,225]},{9:[1,226]},{10:227,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{17:[1,228]},{27:[1,229]},{14:[1,230]},{10:231,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{19:[1,232],40:233,41:$VR,43:$VS},o($VT,[2,44]),{10:234,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{42:[1,235]},{11:[1,236],44:$VG,45:$VH,56:$VI,57:$VJ},{10:55,12:$Vj,14:$Vk,21:237,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,19:[1,238],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,26]),{10:55,12:$Vj,14:$Vk,21:239,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,240]},{11:[1,241]},{2:$Vu,7:60,12:$Vv,19:[1,242],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,12]),o($Vf,[2,13]),{2:$Vu,7:60,12:$Vv,19:[1,243],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,30]),o($Vf,[2,14]),{2:$Vu,7:60,12:$Vv,19:[1,244],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,17]),o($VN,[2,51]),{2:$Vu,7:60,12:$Vv,18:245,19:[1,246],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{17:[1,247]},{24:248,40:202,41:$VR,43:$VS},{10:249,12:$Vj,14:$Vk,45:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,250],44:$VG,45:$VH,56:$VI,57:$VJ},{2:$Vu,7:60,12:$Vv,18:251,19:[1,252],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{14:[1,253]},{10:55,12:$Vj,14:$Vk,21:254,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,255],44:$VG,45:$VH,56:$VI,57:$VJ},o($Vf,[2,20]),o($VT,[2,43]),{42:[1,256],44:$VG,45:$VH,56:$VI,57:$VJ},{2:$Vu,7:60,12:$Vv,18:257,20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{10:55,12:$Vj,14:$Vk,21:258,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,259]},o($Vf,[2,25]),{16:[1,260]},{11:[1,261]},o($Vf,[2,29]),o($Vf,[2,11]),o($Vf,[2,7]),o($Vf,[2,16]),{2:$Vu,7:60,12:$Vv,19:[1,262],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,55]),{2:$Vu,7:60,12:$Vv,18:263,19:[1,264],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{19:[1,265],40:233,41:$VR,43:$VS},{11:[1,266],44:$VG,45:$VH,56:$VI,57:$VJ},{10:55,12:$Vj,14:$Vk,21:267,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{2:$Vu,7:60,12:$Vv,19:[1,268],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,66]),{10:55,12:$Vj,14:$Vk,21:269,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{16:[1,270]},{11:[1,271]},{2:$Vu,7:60,12:$Vv,18:272,20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},o($VT,[2,46],{7:60,46:106,2:$Vu,12:$Vv,20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,47:$VD,48:$VE,49:$VF}),{11:[1,273]},{12:$VU,26:274},{11:[1,276]},o($Vf,[2,28]),o($VN,[2,54]),{2:$Vu,7:60,12:$Vv,19:[1,277],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,57]),o($VN,[2,60]),{10:55,12:$Vj,14:$Vk,21:278,45:$Vl,50:53,53:$Vt,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs},{11:[1,279]},o($VN,[2,65]),{16:[1,280]},{11:[1,281]},o($VN,[2,69]),o($VT,[2,45],{7:60,46:106,2:$Vu,12:$Vv,20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,47:$VD,48:$VE,49:$VF}),{12:$VU,26:282},{16:[1,283]},{44:[1,284],45:[1,285]},o($Vf,[2,27]),o($VN,[2,56]),{11:[1,286]},{12:$VU,26:287},{11:[1,288]},o($VN,[2,68]),{16:[1,289]},{17:[1,290]},{44:[1,291]},{45:[1,292]},{12:$VU,26:293},{16:[1,294]},o($VN,[2,67]),{17:[1,295]},{2:$Vu,7:60,12:$Vv,18:296,19:[1,297],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{16:[2,47]},{16:[2,48]},{16:[1,298]},{17:[1,299]},{2:$Vu,7:60,12:$Vv,18:300,19:[1,301],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,19:[1,302],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,24]),{17:[1,303]},{2:$Vu,7:60,12:$Vv,18:304,19:[1,305],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,19:[1,306],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($Vf,[2,22]),o($Vf,[2,23]),{2:$Vu,7:60,12:$Vv,18:307,19:[1,308],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:59,47:$VD,48:$VE,49:$VF},{2:$Vu,7:60,12:$Vv,19:[1,309],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,64]),o($Vf,[2,21]),{2:$Vu,7:60,12:$Vv,19:[1,310],20:$Vw,22:$Vx,23:$Vy,25:$Vz,27:$VA,28:$VB,29:$VC,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,46:106,47:$VD,48:$VE,49:$VF},o($VN,[2,62]),o($VN,[2,63]),o($VN,[2,61])],
defaultActions: {15:[2,33],16:[2,34],17:[2,35],18:[2,36],19:[2,37],20:[2,1],291:[2,47],292:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//Codigo JavaScript
	const TIPO_OPERACION = require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR = require('./instrucciones').TIPO_VALOR;
	const API = require('./instrucciones').API;

	//Lista de errores
	var errores = [];
	var variables = [];
	var html = "";

	function error(err){
		errores.push(err);
	}

	function variable(tipo, id, fila, columna){
		variables.push({tipo: tipo, nombre: id, fila: fila, columna: columna});
	}

	function docHtml(txt){
		html += txt + "\n";
	}

	exports.reporte = function () { var temp = errores; errores = []; return temp; };
	exports.tablaVar = function () { var temp = variables; variables = []; return temp; };
	exports.docHtml = function () { var temp = html; html = ""; return temp;};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacio en blanco
break;
case 1://Comentario bloque
break;
case 2://Comentario línea
break;
case 3: return 14; 
break;
case 4: return 16; 
break;
case 5: return 17; 
break;
case 6: return 19; 
break;
case 7: return 38; 
break;
case 8: return 11; 
break;
case 9: return 30; 
break;
case 10: return 9; 
break;
case 11: return 42; 
break;
case 12: return 44; 
break;
case 13: return 45; 
break;
case 14: return 56; 
break;
case 15: return 57; 
break;
case 16: return 51; 
break;
case 17: return 52; 
break;
case 18: return 53; 
break;
case 19: return 55; 
break;
case 20: return 54; 
break;
case 21: return '++'; 
break;
case 22: return '--'; 
break;
case 23:return 13;
break;
case 24:return 32;
break;
case 25:return 29;
break;
case 26:return 31;
break;
case 27:return 20;
break;
case 28:return 22;
break;
case 29:return 23;
break;
case 30:return 41;
break;
case 31:return 43;
break;
case 32:return 25;
break;
case 33:return 27;
break;
case 34:return 28;
break;
case 35:return 47;
break;
case 36:return 48;
break;
case 37:return 49;
break;
case 38:return 63;
break;
case 39:return 64;
break;
case 40:return 33;
break;
case 41:return 34;
break;
case 42:return 35;
break;
case 43:return 36;
break;
case 44:return 37;
break;
case 45:return 59;
break;
case 46:return 58;
break;
case 47:return 12;
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 50: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 51:return 5;
break;
case 52:
		//console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
		error({tipo:'Léxico', contenido: 'El caracter << ' + yy_.yytext + ' >> no pertenece al lenguaje' , fila: yy_.yylloc.first_line, columna:  yy_.yylloc.first_column });
	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:=)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:Void\b)/i,/^(?:Main\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:If\b)/i,/^(?:Else\b)/i,/^(?:Switch\b)/i,/^(?:Case\b)/i,/^(?:Default\b)/i,/^(?:For\b)/i,/^(?:While\b)/i,/^(?:Do\b)/i,/^(?:Return\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Char\b)/i,/^(?:Bool\b)/i,/^(?:String\b)/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}